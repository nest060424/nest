# Generated by Django 4.0.1 on 2022-01-27 04:46
from pickle import FALSE, TRUE
from django.contrib.auth.models import User
from django.contrib.auth.models import Group

from django.db import migrations
# Подключаем модуль для работы с датой/веременем
from datetime import datetime, timedelta
# Подключаем модкль генерации случайных чисел
import random

# Получение случайного адреса (k - включает ли адрес квартиру)
def get_adres(k):
    ulica = ["ул. Абая", 
            "ул. Алиханова", 
            "ул. Архитектурная", 
            "ул. Баженова", 
            "ул. Байсеитовой", 
            "ул. Ботаническая", 
            "ул. Вавилова", 
            "ул. Воинов-интернационалистов", 
            "ул. Гастелло", 
            "ул. Гончарная", 
            "ул. Грибоедова", 
            "ул. Дружбы", 
            "ул. Ержанова",
            "ул. Ермекова",
            "ул. Жамбыла", 
            "ул. Заводская", 
            "ул. Защитная", 
            "ул. Ипподромная", 
            "ул. Караванная", 
            "ул. Карла Маркса", 
            "ул. Кирпичная", 
            "ул. Кооперации", 
            "ул. Космонавтов", 
            "ул. Курмангазы", 
            "ул. Луговая", 
            "ул. Луначарского", 
            "ул. Махметова", 
            "ул. Маяковского", 
            "ул. Металлистов", 
            "ул. Мира", 
            "ул. Некрасова", 
            "ул. Новоселов",
            "ул. Олимпийская", 
            "ул. Победы", 
            "ул. Привокзальная", 
            "ул. Рыскулова", 
            "ул. Садовая", 
            "ул. Сатпаева", 
            "ул. Степная", 
            "ул. Стремянная", 
            "ул. Таттимбета", 
            "ул. Университетская", 
            "ул. Фрунзе",
            "ул. Чехова", 
            "ул. Чайковского", 
            "ул. Шакирова", 
            "ул. Экибастузская", 
            "ул. Энтузиастов",
            "ул. Юбилейная",
            "ул. Южная"
        ]
    if (k==True):
        adres = random.choice(ulica) + ", " + str(random.randint(1, 200)) + "-" + str(random.randint(1, 200)) 
    else:
        adres = random.choice(ulica) + ", " + str(random.randint(1, 200)) 
    return adres

# Получение случайного телефона
def get_telefon():
    if random.randint(0, 1) == 1:
        telefon = "+7-701-"
    else:
        telefon = "+7-705-" 
    telefon = telefon + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) + "-" + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) 
    return telefon

# Получение случайного ИИН в зависимости от даты рождения и пола
# Индивидуальный идентификационный номер (далее — ИИН) содержит 12 цифр и состоит из четырех частей: 
# 1) первая часть — состоит из 6 цифр и включает в себя год рождения (две последние цифры), месяц и дату рождения физического лица; 
# 2) вторая часть — состоит из 1 цифры и включает в себя пол физического лица и век его рождения и определяется следующим образом: 
# 1 — для мужчин, родившихся в 19 веке; 
# 2 — для женщин, родившихся в 19 веке; 
# 3 — для мужчин, родившихся в 20 веке; 
# 4 — для женщин, родившихся в 20 веке; 
# 5 — для мужчин, родившихся в 21 веке; 
# 6 — для женщин, родившихся в 21 веке. 
# В дальнейшем при необходимости применяются резервные цифры 7, 8, 9, 0, использование которых возможно по истечении XXI века, при этом применяются нечетные цифры — для мужчин, четные — для женщин; 
# 3) третья часть — состоит из 4 цифр и включает в себя порядковый номер регистрации в системе; 
# 4) четвертая часть — состоит из 1 цифры, определяемой автоматически и являющейся контрольной цифрой.
def get_iin(data_rozhdeniya, pol):
    # Год, месяц, число
    y = str(data_rozhdeniya.year)[2:]
    m = str(data_rozhdeniya.month)
    if len(m) == 1:
        m = "0" + m
    d = str(data_rozhdeniya.day)
    if len(d) == 1:
        d = "0" + d
    # Пол и век рождения
    if str(data_rozhdeniya.year)[0:2] == "18":
        if pol == "М":
            iin = y + m + d + "1"
        else:
            iin = y + m + d + "2"
    elif str(data_rozhdeniya.year)[0:2] == "19":
        if pol == "М":
            iin = y + m + d + "3"
        else:
            iin = y + m + d + "4"
    elif str(data_rozhdeniya.year)[0:2] == "20":
        if pol == "М":
            iin = y + m + d + "5"
        else:
            iin = y + m + d + "6"
    else:
        if pol == "М":
            iin = y + m + d + "7"
        else:
            iin = y + m + d + "8"    
    iin = iin + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9))
    return iin

# Получение случайной даты в заданном диапазоне дат
#start_dt = datetime.strptime("01.01.1963", "%d.%m.%Y")
#end_dt = datetime.strptime("01.01.2001", "%d.%m.%Y")
#print(get_random_date(start_dt, end_dt))
def get_random_date(start, end):
    delta = end - start
    return start + timedelta(random.randint(0, delta.days))

# Найти или Добавить Категория 
global dict_category
dict_category = {}

def get_category(apps, val):   
    # Поиск 
    if val in dict_category.values():
        for k, v in dict_category.items():
            if v == val:
                return k    
    else:
        Category = apps.get_model("center", "Category")
        category = Category()
        category.title = val
        category.save()
        dict_category[category.id] = category.title
        return category.id

# Найти или Добавить Отдел
global dict_department
dict_department = {}

def get_department(apps, val):   
    # Поиск 
    if val in dict_department.values():
        for k, v in dict_department.items():
            if v == val:
                return k    
    else:
        Department = apps.get_model("sequence", "Department")
        department = Department()
        department.title = val
        department.save()
        dict_department[department.id] = department.title
        return department.id

# Найти или Добавить Должность 
global dict_position
dict_position = {}

def get_position(apps, val):   
    # Поиск 
    if val in dict_position.values():
        for k, v in dict_position.items():
            if v == val:
                return k    
    else:
        Position = apps.get_model("sequence", "Position")
        position = Position()
        position.title = val
        position.save()
        dict_position[position.id] = position.title
        return position.id

# Добавить Персону
def insert_person(apps, param):
    Person = apps.get_model("sequence", "Person")
    person = Person()
    person.user_id = param[0]
    person.iin = param[1]
    person.surname = param[2]
    person.name = param[3]
    person.patronymic = param[4]
    person.birthday = param[5]
    person.save()
    return 

# Найти или Добавить Статус 
global dict_status
dict_status = {}

def get_status(apps, val):   
    # Поиск 
    if val in dict_status.values():
        for k, v in dict_status.items():
            if v == val:
                return k    
    else:
        Status = apps.get_model("sequence", "Status")
        status = Status()
        status.title = val
        status.save()
        dict_status[status.id] = status.title
        return status.id

# Найти или Добавить Вид документа 
global dict_kind
dict_kind = {}

def get_kind(apps, val):   
    # Поиск 
    if val in dict_kind.values():
        for k, v in dict_kind.items():
            if v == val:
                return k    
    else:
        Kind = apps.get_model("sequence", "Kind")
        kind = Kind()
        kind.title = val
        kind.save()
        dict_kind[kind.id] = kind.title
        return kind.id

# Добавить Сотрудника
def insert_employee(apps, param):
    Employee = apps.get_model("sequence", "Employee")
    employee = Employee()
    employee.user_id = param[0]
    employee.surname = param[1]
    employee.name = param[2]
    employee.patronymic = param[3]
    employee.department_id = param[4]
    employee.position_id = param[5]
    employee.signature = param[6]
    employee.save()
    return 
    
# Добавить Новости
def insert_news(apps, param):
    News = apps.get_model("sequence", "News")
    news = News()
    news.daten = param[0]
    news.title = param[1]
    news.details = param[2]
    news.photo = param[3]
    news.save()
    return 

# Добавить человека 
def insert_person(apps, param):   
    Person = apps.get_model("sequence", "Person")
    person = Person()
    person.user_id = param[0]
    person.sex = param[1]
    person.iin = get_iin(param[2], param[1])
    person.birthday = param[2]
    person.surname = param[3]
    person.name = param[4]
    person.patronymic = param[5]
    person.save()
    return

# Начальные данные 
def new_data(apps, schema_editor):
    try:
    
        # Суперпользователь id-1
        user = User.objects.create_superuser(username='root',
        email='nest060424@mail.ru',
        password='SsNn5678+-@')
        print("Суперпользователь создан")
    
        # Группа Руководство
        managements = Group.objects.get_or_create(name = 'Managements')
        managements = Group.objects.get(name='Managements')
        print("Группа руководство создана")
    
        # Пользователь с ролью Руководство id-2
        user = User.objects.create_user(username='management', password='pass12345+@')
        managements.user_set.add(user)
        print("Руководство добавлены в группу Руководство")

        # Группа с ролью член комисиии
        commissions = Group.objects.get_or_create(name = 'Commissions')
        commissions = Group.objects.get(name='Commissions')
        print("Группа комиссия создана")
        
        # Пользователи с ролью член комисиии id3-7
        user = User.objects.create_user(username='commission1', password='pass12345+@')
        commissions.user_set.add(user)
        user = User.objects.create_user(username='commission2', password='pass12345+@')
        commissions.user_set.add(user)
        user = User.objects.create_user(username='commission3', password='pass12345+@')
        commissions.user_set.add(user)
        user = User.objects.create_user(username='commission4', password='pass12345+@')
        commissions.user_set.add(user)
        user = User.objects.create_user(username='commission5', password='pass12345+@')
        commissions.user_set.add(user)
        print("Члены комисиии добавлены в группу членов комисиии")
        user = User.objects.get(username='management')
        commissions.user_set.add(user)
        print("Руководитель добавлен в группу членов комисиии")
    
        # Группа менеджеров
        managers = Group.objects.get_or_create(name = 'Managers')
        managers = Group.objects.get(name='Managers')
        print("Группа менеджеров создана")
    
        # Пользователь с ролью менеджера id8
        user = User.objects.create_user(username='manager', password='Ss0066+-')
        managers.user_set.add(user)
        print("Менеджер добавлен в группу менеджеров")

        # Простые пользователи (заявители) id9-18
        user = User.objects.create_user(username='user1', password='Uu0066+-')
        user = User.objects.create_user(username='user2', password='Uu0066+-')
        user = User.objects.create_user(username='user3', password='Uu0066+-')
        user = User.objects.create_user(username='user4', password='Uu0066+-')
        user = User.objects.create_user(username='user5', password='Uu0066+-')
        user = User.objects.create_user(username='user6', password='Uu0066+-')
        user = User.objects.create_user(username='user7', password='Uu0066+-')
        user = User.objects.create_user(username='user8', password='Uu0066+-')
        user = User.objects.create_user(username='user9', password='Uu0066+-')
        user = User.objects.create_user(username='user10', password='Uu0066+-')
        print("Созданы простые пользователи")
        
        # Добавить Сотрудника
        parameters = [2, 'Абдиламитов', 'Адилжан', 'Закиржанович', get_department(apps, "Руководство"), get_position(apps, "Начальник управления"), 5]
        insert_employee(apps, parameters)
        parameters = [3, 'Болатов', 'Алмас', 'Ерланович', get_department(apps, "Юридический отдел"), get_position(apps, "Начальник отдела"), 1]
        insert_employee(apps, parameters)
        parameters = [4, 'Кокишев', 'Дамир', 'Алтынбекович', get_department(apps, "Финансовый отдел"), get_position(apps, "Начальник отдела"), 2]
        insert_employee(apps, parameters)
        parameters = [5, 'Орманова', 'Айгерим', 'Сабыржанкызы', get_department(apps, "Отдел ЖКХ"), get_position(apps, "Начальник отдела"), 3]
        insert_employee(apps, parameters)
        parameters = [6, 'Абдиламитов', 'Адилжан', 'Закиржанович', get_department(apps, "Плановый отдел"), get_position(apps, "Начальник отдела"), 4]
        insert_employee(apps, parameters)
        parameters = [7, 'Құралбай', 'Сания', 'Ерланқызы', get_department(apps, "Плановый отдел"), get_position(apps, "Главный специалист"), 5]
        insert_employee(apps, parameters)
        parameters = [8, 'Сабиров', 'Эльяр', 'Бахтиярович', get_department(apps, "Канцелярия"), get_position(apps, "Главный специалист"), 0]
        insert_employee(apps, parameters)
        print("Созданы Сотрудники")

        # Добавить Человека
        parameters = [9, "Ж", get_random_date(datetime.strptime("01.09.2005", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), 'Ербаянова', 'Дария', 'Алибековна']        
        insert_person(apps, parameters)
        parameters = [10, "Ж", get_random_date(datetime.strptime("01.09.2005", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), 'Сабирова', 'Юлия', 'Фархатовна']        
        insert_person(apps, parameters)
        parameters = [11, "М", get_random_date(datetime.strptime("01.09.2005", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), 'Хамза', 'Олжас', 'Кәдірбайұлы']        
        insert_person(apps, parameters)
        parameters = [12, "М", get_random_date(datetime.strptime("01.09.2005", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), 'Ногаев', 'Нурас', 'Кайрошулы']        
        insert_person(apps, parameters)
        parameters = [13, "Ж", get_random_date(datetime.strptime("01.09.2005", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), 'Телагисова', 'Дана', 'Мерекеевна']        
        insert_person(apps, parameters)
        parameters = [14, "М", get_random_date(datetime.strptime("01.09.2005", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), 'Қанжігіт', 'Аман', 'Қайратұлы']        
        insert_person(apps, parameters)
        parameters = [15, "Ж", get_random_date(datetime.strptime("01.09.2005", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), 'Коломиец', 'Анна', 'Алексеевна']        
        insert_person(apps, parameters)
        parameters = [16, "М", get_random_date(datetime.strptime("01.09.2005", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), 'Ергешов', 'Нуритдин', 'Мирсаидұлы']        
        insert_person(apps, parameters)
        parameters = [17, "Ж", get_random_date(datetime.strptime("01.09.2005", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), 'Турсынова', 'Назель', 'Бакытжанкызы']        
        insert_person(apps, parameters)
        parameters = [18, "Ж", get_random_date(datetime.strptime("01.09.2005", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), 'Қылышбай', 'Алуа', 'Анарханқызы']        
        insert_person(apps, parameters)
        print("Созданы Человеки")
         
        ##### Категория учета #####
    
        Category = apps.get_model("sequence", "Category")
   
        category = Category()
        category.id = 1
        category.title = 'Ветераны Великой Отечественной войны'
        category.save()

        category = Category()
        category.id = 2
        category.title = 'Дети-сироты, дети, оставшиеся без попечения родителей'
        category.save()

        category = Category()
        category.id = 3
        category.title = 'Многодетные матери'
        category.save()

        category = Category()
        category.id = 4
        category.title = 'Социально уязвимые слои населения'
        category.save()

        category = Category()
        category.id = 5
        category.title = 'Государственные служащие'
        category.save()

        category = Category()
        category.id = 6
        category.title = 'Граждане, единственное жилище которых признано аварийным'
        category.save()



        ##### Статус #####
    
        Status = apps.get_model("sequence", "Status")
   
        status = Status()
        status.id = 1
        status.title = 'Проверка документов'
        status.save()
   
        status = Status()
        status.id = 2
        status.title = 'Возврат'
        status.save()

        status = Status()
        status.id = 3
        status.title = 'В работе'
        status.save()

        status = Status()
        status.id = 4
        status.title = 'Завершено c постановкой в очередь'
        status.save()

        status = Status()
        status.id = 5
        status.title = 'Завершено c отказом'
        status.save()

        print("Статус добавлен в БД")

        ##### Вид документа #####
    
        Kind = apps.get_model("sequence", "Kind")
   
        kind = Kind()
        kind.id = 1
        kind.title = 'Заявление'
        kind.save()
   
        kind = Kind()
        kind.id = 2
        kind.title = 'Удостоверение личности'
        kind.save()
   
        kind = Kind()
        kind.id = 3
        kind.title = 'Свидетельство о заключении (расторжении) брака'
        kind.save()
   
        kind = Kind()
        kind.id = 4
        kind.title = 'Свидетельство о рождении'
        kind.save()
   
        kind = Kind()
        kind.id = 5
        kind.title = 'Свидетельство о смерти'
        kind.save()
   
        kind = Kind()
        kind.id = 6
        kind.title = 'Трудовая книжка'
        kind.save()
   
        kind = Kind()
        kind.id = 7
        kind.title = 'Иное'
        kind.save()

        print("Вид документа добавлен в БД")
 
        parameters = [datetime.now() - timedelta(days=10) + timedelta(minutes=random.randint(1, 240)), "Жилье дешевеет по всему миру. Похоже на начало кризиса 2008 года?", """Жилье во всем мире дешевеет на протяжении пяти кварталов. Аналогичная ситуация наблюдалась в 2008 году: опрошенные экономисты порассуждали о том, что является предзнаменованием нового глобального кризиса, передает Tengrinews.kz со ссылкой на РИА Новости.
о данным Банка международных расчетов (МБР), жилая недвижимость по всему миру начала дешеветь в третьем квартале 2022 года. Аналогичный по продолжительности период снижения фиксировался 15 лет назад - с конца 2008 года по четвертый квартал 2009 года включительно.
Лидером по снижению стоимости в третьем квартале минувшего года стал европейский регион: сильнее всего квадратные метры подешевели в:
Люксембурге - на 17 процентов;
Германии - на 15 процентов;
Финляндии и Словакии - на 12 процентов;
Чехии - на 11 процентов.
А в Турции дорожает
В третьем квартале недвижимость активно дорожала в Турции: стоимость квадратных метров прибавила сразу 21 процент. Также положительную динамику аналитики зафиксировали в ОАЭ (17 процентов), Греции (9,4 процента), на Филиппинах (7 процентов) и в Мексике (5,5 процента).
Похоже на начало глобального кризиса? Эксперты не рискуют утверждать
Мировая статистика, по словам аналитика Максима Осадчего, отражает в первую очередь кризис на китайском рынке жилья, проявляющийся в форме кризиса перепроизводства. Огромные объемы построенного жилья не распроданы, цены на жилье падают, несмотря на попытки государства поддержать их с помощью, например, льготной ипотеки.""", "images/news1.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=9) + timedelta(minutes=random.randint(1, 240)), "Впервые за 8 лет аренда жилья подешевела в Алматы", """Согласно данным Бюро национальной статистики, цены на рынке жилья в Алматы в феврале по сравнению с январем снизились сразу по всем трем категориям. Причем впервые с мая 2016 года.
Снимать квартиру стало дешевле на 2,9 процента, стоимость покупки квартир в первичном фонде упала на 1,4 процента, квартиры во вторичном фонде дешевеют второй месяц подряд, на 0,4 процента.
Цены нового жилья по Казахстану в целом выросли, но незначительно, +0,4 процента. Небольшое снижение, кроме Алматы, отмечается в Караганде (-0,3 процента) и Павлодаре (-0,1 процента).
Перепродажа квартир по стране выросла на 1,7 процента, особенно заметно дорожает вторичка в Астане - +5,3 процента.
Аренда по стране дешевеет на 1,2 процента, наиболее ощутимо - в Семее - сразу на 4,4 процента.""", "images/news2.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=8) + timedelta(minutes=random.randint(1, 240)), "Президент поручил запустить новую жилищную программу", """Выступая на третьем заседании Национального курултая, Токаев заявил, что еще одной ключевой составляющей высокого качества жизни казахстанцев является наличие собственного жилья.
"С 1 марта начата реализация ипотечной программы "Отау", которая сейчас пользуется большим спросом. В дополнение необходимо запустить новую жилищную программу, в том числе для жителей сел и районных центров. При этом для социально уязвимых категорий ставка по займу не должна превышать семь процентов. Наряду с этим поручаю правительству кратно нарастить объемы предоставляемого арендного жилья с правом выкупа.
Внедрение новой льготной ипотеки и масштабное строительство арендного жилья оживят строительный сектор, в котором добросовестно трудятся сотни тысяч наших сограждан, и, главное, поможет многим нуждающимся приобрести жилье", - заявил Президент.
Отметим, ранее мы рассказывали о том, что в Астане 1 февраля начался прием заявок на льготную жилищную программу "Елорда жастары". Квартиру по программе "Елорда жастары" смогут приобрести 80 казахстанцев из общего числа подавших заявки. Получить жилье можно на первичном либо вторичном рынке в столице через "Отбасы банк".""", "images/news3.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=7) + timedelta(minutes=random.randint(1, 240)), "Новая ипотека с 1 мая в Казахстане: появились подробности", """В интервью телеканалу "24KZ" министр национальной экономики Нурлан Байбазаров рассказал, что на ипотечную программу, которая будет запущена с 1 мая, выделено 300 миллиардов тенге. По словам министра, с 1 марта в стране работала ипотечная программа "Отау" от Отбасы банка. На нее был большой спрос и подано 18 тысяч заявлений, из которых 11 тысяч проверили на соответствие требованиям, и они фактически были одобрены. При этом выделенных на программу 150 миллиардов тенге хватит на 7-8 тысяч квартир, то есть спрос превысил возможности и поэтому необходимо продолжать внедрение новых ипотечных программ.
        "Новая инициатива позволит дополнительно охватить более 12 тысяч семей. В отличие от программы "Отау" здесь участвуют не только вкладчики Отбасы банка, но и другие категории граждан, в первую очередь те, кто стоит на очереди у местных исполнительных органов на получение жилья - молодые семьи, жители моногородов, районов", - отметил Нурлан Байбазаров.
Условия программы будут предусматривать различные ставки для разных категорий граждан:
7 процентов годовых для очередников, ожидающих получение жилья через местные органы, без необходимости иметь предварительные накопления,
9 процентов годовых для остальных участников программы.
Министр считает, что дополнительные 12 тысяч сделок при общем объеме рынка в 370 тысяч не должны привести к общему подъему цен на жилье. Кроме того, квартиры будут продаваться по фиксированным ценам.""", "images/news4.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=6) + timedelta(minutes=random.randint(1, 240)), "Эксперты прогнозируют изменение цен на недвижимость в Казахстане", """В этом году эксперты прогнозируют рост цен на недвижимость в Казахстане, но только в рамках инфляции, передает Tengrinews.kz со ссылкой на 24KZ.
"Недвижимость, как любой товар, в рамках действующей инфляции будет действительно дорожать. "Первичка" будет дорожать в соответствии с инфляцией стройматериалов, а за ней, как всегда, идет "вторичка". Поэтому скачков не будет. Никаких ожиданий больших перемен ожидать не стоит", - заявил президент Саморегулируемой ассоциации риелторов Казахстана Александр Пак.
По словам экспертов, рост цен зависит и от стройматериалов. В Казахстане строить дома стало дороже. За год стоимость необходимых материалов выросла на шесть процентов. Больше, чем на семь процентов, подорожали гравий, песок, глина, минеральные изделия и не только. А вот некоторые стройматериалы, наоборот, подешевели: это стекло листовое, краски и лаки, проволока холодного вытягивания и паркет.
Если же рассматривать динамику изменения цен по регионам, то строить стало дороже в Астане, Шымкенте, Павлодарской, Улытауской и Жетысуской областях.
По данным Бюро нацстатистики, в этом году больше всего жилье на первичном рынке подорожало в Актобе и Кызылорде - почти на девять процентов и больше чем на семь процентов соответственно. Что касается "вторички", то рост цен был замечен в Талдыкоргане и Атырау.
Эксперты прогнозируют удорожание жилья и в Алматы.
""", "images/news5.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=5) + timedelta(minutes=random.randint(1, 240)), "Новая ипотека \"Наурыз\" с 1 мая в Казахстане: подробности", """Как сообщил заместитель премьер-министра - министр национальной экономики Нурлан Байбазаров, новая ипотека будет называться "Наурыз".
"Глава государства озвучил инициативу по запуску новой ипотечной программы в марте на Национальном курултае, как раз в период празднования Наурызнама. Поэтому программа получила название "Наурыз". В этом году она стартует 1 мая", - рассказал в интервью Нурлан Байбазаров.
В Министерстве экономики и в Министерстве промышленности и строительства озвучили условия новой ипотеки:
⁠максимальная сумма займа - пока на рассмотрении;
минимальная сумма вклада – не менее 1 000 000 тенге;
ставка вознаграждения - 7 процентов для социально уязвимых слоев населения (многодетные семьи, дети-сироты, лица с ограниченными возможностями и так далее - прим.) и 9 процентов годовых для остальных вкладчиков;
⁠размер первоначального взноса - от 20 процентов;
срок займа - до 19 лет;
в Астане, Алматы, Шымкенте и областных центрах допускается приобретение только первичного жилья. В остальных регионах допускается вторичное жилье.
для людей, не имевших недвижимости и операций с ней за последние 5 лет, необходимо наличие официального дохода (включая тех, кто участвует в активных мерах занятости).
В Министерстве промышленности, в свою очередь, отметили, что в новой программе сможет участвовать работающая молодежь, молодые семьи, получатели жилищных выплат, вкладчики банка, жители моногородов, районных центров и сельских населенных пунктов, в том числе - очередники на жилье без требований к накоплениям.""", "images/news6.jpg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=4) + timedelta(minutes=random.randint(1, 240)), "В Казахстане спрогнозировали стремительный рост очереди на жилье", """Мажилисмен Ерлан Стамбеков озвучил депутатский запрос, где поднял проблему обеспечения доступности жилья для казахстанцев, передает корреспондент Tengrinews.kz.
        Депутат направил запрос на имя премьер-министра, в котором заявил о необходимости нарастить объемы предоставляемого арендного жилья с правом выкупа.
"Внедрение новой льготной ипотеки и масштабное строительство арендного жилья оживят строительный сектор, в котором добросовестно трудятся сотни тысяч наших сограждан и, главное, помогут многим нуждающимся приобрести жилье. Проблема обеспечения доступности жилья для населения всегда была в центре внимания государства, поскольку одной из основных потребностей людей является наличие жилья", - подчеркнул депутат.
По его словам, из-за условий кредитования и ограниченных доходов лишь доля населения республики может получить квартиры по ныне существующим программам и другим ипотечным кредитам.
"Население нашей страны уже достигло 20 миллионов человек, а количество очередников только последние три года выросло с 480 тысяч человек до 640 тысяч человек. И это с учетом того, что ежегодно по кредитному жилью выдается 15 тысяч квартир и порядка 9-10 тысяч квартир арендного жилья, что в сумме составляет около 25 тысяч квартир. Несложно подсчитать, что такими темпами через несколько лет количество очередников достигнет 1 миллиона человек", - заявил мажилисмен.
По данным депутата, в конце 2022 года обеспеченность жильем на одного проживающего в республике составила 23,4 квадратных метра.
"Это значение ниже стандартов ООН, которые составляют 30 квадратных метров на человека. При этом для одномоментного обеспечения жильем всех очередников по стандартам ООН необходимо построить 19,2 миллиона квадратных метров на сумму 9,5 триллиона тенге. Одним из основных элементов концепции является создание Национального института развития "Отбасы банк", который призван будет осуществлять учет, постановку и распределение жилья, а также прием вкладов в жилищные строительные сбережения, открытие и ведение счетов вкладчиков, предоставление жилищных займов, субсидирование арендных платежей", - заявил мажилисмен.""", "images/news7.jpg" ]
        insert_news(apps, parameters)

        print("Новости добавлен в БД")

    except Exception as error:
        print(error)

class Migration(migrations.Migration):

    dependencies = [
        ('sequence', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(new_data),        
    ]

